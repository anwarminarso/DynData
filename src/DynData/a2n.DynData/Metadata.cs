using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
#nullable disable

namespace a2n.DynData
{
    public class Metadata
    {
        public string FieldName { get; set; }
        public string FieldType { get; set; }
        public string FieldLabel { get; set; }

        public bool IsPrimaryKey { get; set; }
        public bool IsAutoGenerated { get; set; }
        public bool IsForeignKey { get; set; }
        public bool IsNullable { get; set; }

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public string PrincipalName { get; set; } = null;

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public string PrincipalLabel { get; set; } = null;

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public string PrincipalFieldName { get; set; } = null;

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public string PrincipalDisplayFieldName { get; set; } = null;


        [JsonIgnore]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Always)]
        public PropertyInfo PropertyInfo { get; set; }

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public object CustomAttributes { get; set; }


        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public string DataFormatString { get; set; }

        public Metadata()
        {

        }
        public Metadata(PropertyInfo pi, Action<Metadata> act = null)
        {
            this.FieldName = pi.Name;
            if (Nullable.GetUnderlyingType(pi.PropertyType) != null)
            {
                this.FieldType = Nullable.GetUnderlyingType(pi.PropertyType).Name;
                this.IsNullable = true;
            }
            else
            {
                this.FieldType = pi.PropertyType.Name;
                this.IsNullable = false;
            }
            this.FieldLabel = pi.Name.ToHumanReadable();
            this.PropertyInfo = pi;
            if (act != null)
                act(this);
        }
        public Metadata(Microsoft.EntityFrameworkCore.Metadata.IProperty p, Action<Metadata> act = null)
        {
            PropertyInfo pi = p.PropertyInfo;
            Type pType = null;
            if (pi != null)
            {
                pType = Nullable.GetUnderlyingType(pi.PropertyType) ?? pi.PropertyType;
                this.PropertyInfo = pi;
                this.FieldName = pi.Name;
                this.FieldType = pType.Name;
                this.FieldLabel = pi.Name.ToHumanReadable();
            }
            else
            {
                pType = Nullable.GetUnderlyingType(p.ClrType) ?? p.ClrType;
                this.FieldName = p.Name;
                this.FieldType = pType.Name;
                this.FieldLabel = p.Name.ToHumanReadable();
            }
            this.IsAutoGenerated = p.ValueGenerated == Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd;
            this.IsNullable = p.IsColumnNullable();
            this.IsPrimaryKey = p.IsPrimaryKey();
            this.IsForeignKey = p.IsForeignKey();
            if (this.IsForeignKey)
            {
                var pr = p.FindFirstPrincipal();
                PrincipalFieldName = pr.Name;
                PrincipalName = pr.DeclaringType.DisplayName();
                PrincipalLabel = PrincipalName.ToHumanReadable();
                var piLabel = pr.DeclaringEntityType.GetProperties().Where(t => t.ClrType == typeof(string)).FirstOrDefault();
                if (piLabel != null)
                    PrincipalDisplayFieldName = piLabel.Name;
                else
                    PrincipalDisplayFieldName = PrincipalFieldName;
            }
            if (act != null)
                act(this);
        }


    }
}
