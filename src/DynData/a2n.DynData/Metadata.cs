using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
#nullable disable

namespace a2n.DynData
{
    public class Metadata
    {
        public string FieldName { get; set; }
        public string FieldType { get; set; }
        public string FieldLabel { get; set; }

        public bool IsPrimaryKey { get; set; }
        public bool IsAutoGenerated { get; set; }
        public bool IsForeignKey { get; set; }
        public bool IsNullable { get; set; }

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public string PrincipalName { get; set; } = null;

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public string PrincipalFieldName { get; set; } = null;

        [JsonIgnore]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Always)]
        public PropertyInfo PropertyInfo { get; set; }

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public object CustomAttributes { get; set; }


        public Metadata()
        {

        }
        public Metadata(PropertyInfo pi, Action<Metadata> act = null)
        {
            this.FieldName = pi.Name;
            this.FieldType = pi.PropertyType.FullName;
            this.FieldLabel = HumanReadableString(pi.Name);
            this.PropertyInfo = pi;
            if (act != null)
                act(this);
        }
        public Metadata(Microsoft.EntityFrameworkCore.Metadata.IProperty p, Action<Metadata> act = null)
        {
            PropertyInfo pi = p.PropertyInfo;
            if (pi != null)
            {
                this.PropertyInfo = pi;
                this.FieldName = pi.Name;
                this.FieldType = pi.PropertyType.FullName;
                this.FieldLabel = HumanReadableString(pi.Name);
            }
            else
            {
                this.FieldName = p.Name;
                this.FieldType = p.ClrType.Name;
                this.FieldLabel = HumanReadableString(p.Name);
            }
            this.IsAutoGenerated = p.ValueGenerated == Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd;
            this.IsNullable = p.IsColumnNullable();
            this.IsPrimaryKey = p.IsPrimaryKey();
            this.IsForeignKey = p.IsForeignKey();
            if (this.IsForeignKey)
            {
                var pr = p.FindFirstPrincipal();
                PrincipalFieldName = pr.Name;
                PrincipalName = pr.DeclaringType.DisplayName();
            }
            if (act != null)
                act(this);
        }


        private static string HumanReadableString(string value)
        {
            var output = "";
            var len = value.Length;
            var c = "";

            for (var i = 0; i < len; i++)
            {
                c = value[i].ToString();

                if (i == 0)
                {
                    output += c.ToUpper();
                }
                else if (c != c.ToLower() && c == c.ToUpper())
                {
                    output += " " + c;
                }
                else if (c == "-" || c == "_")
                {
                    output += " ";
                }
                else
                {
                    output += c;
                }
            }

            return output;
        }
    }
}
